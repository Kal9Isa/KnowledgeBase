- JavaScript is used to make a static web page, dynamic.

- It can be embedded directly in html using <script> tags or
<link> tag to external .js files.

- Browsers such as Chrome provide a JS "Read Evaluate Print Loop"
console for writing and evaluating code and checking the output
generated by it.

- You can also develop JS in s .js file and execute it in a
runtime environment such as Node.js.

- to declare a variable
    var variable-name = ;

- we use "document.write(var);" to print the value of a variable.

- we can also use "console.log(var);" to print the value of a
variable to browser console.

- also "alert(var);" will create a popup with the variable's
value that appears on top of browser.

- last using REPL and call the variable name.

- type of variables are dynamic. variable types are:
    - Number
        all the numbers are stored using floating-point notation.
        i.e. 5 is stored as 0.5e1.
        - +infinity represent all number grater than
        Number.MAX_VALUE(around 10^308).
        - -infinity represents all numbers less than
        Number.MIN_VALUE(around 10^-324).
        - NaN which means not a number, like Number(tree) returns NaN.
        - ++ and -- can be used to increment/decrement.

    - String
        - represented by a series of 16-bit unsigned integers, each
        representing a character.
        - convention is to use single quotes normally.
        - escape characters use backslash: \n, \t, \\
        - all JS strings are immutable, which means any manipulation
        results in a new one.
        - + or .concat(string) can be used to concatenate.
        - .toUpperCase() and .toLowerCase() makes a new string.
        - var.length

    - Boolean

        - true or flase
        - any value can be used as boolean in JS:
            - falsy values: null, undefined, 0, NaN, ''
            - truthy values: every other value.
        - any variable can become boolean when used with logical ops.
        - Null can be assigned to mean no value.
        - Undefined means it has no value.

    - Null
    - Undefined

- Arrays are used to store a list of values in a single variable.
    var myArray = ['hello', 5, false];

    - using arrayVar[index] we can access its elements.
    - length of an array can be found using .length
    - we will get an undefined if the index is out of bounds.
    - if you set a value to an out of bounds index, it will add
    that value to that index of the array.
    - if the index is negative it creates a mapping to that value.
    - push() will add elements to the end of the array.
    - unshift() will add elements to the beginning of the array.
    - pop() will remove and return an element from the end of the array.
    - shift() will remove and return an element from the beginning.

- Objects are used to store key-value pairs.
    var myObject = {}

    - values can be of any type, including arrays and objects.
    - values can be accessed by myObject.property or
    myObject['property']
    - Key-values can be added even after initial declaration.

JavaScript controls

- conditional statements
    - if (condition) {command;} else {command;}
    - === means equal to and same type
    - !== means not equal to or different type
    - || logical OR
    - && logical AND
    - ! logical NOT
    - when comparing a string to a number, JS will try to convert
    the string to numeric form.
    - non-numeric strings are compared alphabetically.
    - objects are only considered equal if the variables are aliases
    which means they refer to the same object.


- loop statements

  - for (var i = 1; loop condition; i++){command;}
  - while (loop condition) {command;}
  - do {command;} while (loop condition);


Functions

- function function-name (parameters) {body}
    - we can use return value;
    - .forEach(function-name); function will apply the function
    to each element of an array.
    - .every(function-name); function will call the function on
    every element of an array.
    - .map(function-name); will apply the function to every element
    of an array but it would return a new array with the new values.
    - Primitive arguments are passed by value meaning the function
    can not change them.
    - object arguments are passed by reference meaning the function
    can change them.
    - JS functions are objects, therefore they can have properties,
    also variables can refer to them.
    - functions can also be declared and used in objects.
    - every object is JS has a prototype, accessed from the __proto__
    property in the object. __proto__ is also an object and so on.
    - the root prototype of all objects is Object.prototype.
    - an object inherits the properties of its prototype.
    - "this" keyword refers to the current object.
    - "new" keyword can be used to create new objects from the same
    prototype.
    - prototypes can extend another prototype with more functionality.
    - to inherit a prototype, set the __proto__ property of an object
    to the parent prototype.
        this.__proto__ = new object;
    - properties and methods can be added to prototypes by adding them
    to the prototype property.
        object.prototype.newProperty;


JS Regular expressions

- strings are objects too.
- we can access each character by its (0-based) index using charAt or
array notion.
- modifying functions return a new string.
- .trim() function can be used to remove white spaces from the beginning
and the end.
- .startsWith(string); returns a true or false value, case sensitive.
- .endsWith(string);
- .includes(string);
- .search(string); returns the starting index of a contained substring.
it will return -1 if does not contain.


- a regular expression is a pattern of characters
- a string matches a regular expression if it adheres to the
same pattern.
- we can pass a regular expression to the .search(); function
- in general it is considered a match if any part of the string
matches the regular expression.
- (/regular expression/i) will ignore case.
- /regex/.test(string); can be used to find a pattern in a string.
returns true or false.
- /[abc]/ will look for any of those regex characters in the string.
- /[a-z]/ will specify a range of characters to look for.
- /\d/ looks up for digits.
- /[0-9][a-z][0-9]/ looks for a 3r4 pattern.
- /[^0-9a-z]/ looking for a pattern not including 0-9 and a-z.
- ? means single or no occurrence.
- * means 0 or more
- /^[a-z][0-9]/ means starts with an alphabet.
- /[a-z][0-9]$/ means ends with a digit.
- /^[][]$/ means looking for an exact match.

- Document Object Model is a structured tree representation of a web page.
    * the HTML of every web page is turned into a DOM representation by the
    browser.
    * DOM provides a way for us to programmatically access that structure in
    JavaScript.
    * the root DOM object can be accessed by the object called "document".
    * elements in the DOM tree can be retrieved and manipulated.
    * document.getElementById('element-id') will retrieve the desired element
    using the id assigned to it.
    * we can set html value of the element using .innerHTML
    * data can be stored in the browser across multiple page requests using
    "localStorage".
    * parseInt() is used to change the value into integer after reading from
    a storage.
    * .setItem('property', value) will set a value to a variable or storage.
    * elementId.style.property can be used to change an item's style using JS.

- JavaScript Object Notation (JSON)
    * is a textual representation of a JavaScript object that can be stored as
    a string in a .json file, or be exchanged between programs.
    * JavaScript objects can be turned into a JSON string via
        JSON.stringify(object-name)
    * string representation can be converted back to an object via
        JSON.parse(json-string)
    * all values must be a string, number, array, boolean, null, or another
    valid json object.
    
