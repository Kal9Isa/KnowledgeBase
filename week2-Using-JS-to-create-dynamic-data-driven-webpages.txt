- JavaScript is used to make a static web page, dynamic.

- It can be embedded directly in html using <script> tags or
<link> tag to external .js files.

- Browsers such as Chrome provide a JS "Read Evaluate Print Loop"
console for writing and evaluating code and checking the output
generated by it.

- You can also develop JS in s .js file and execute it in a
runtime environment such as Node.js.

- to declare a variable
    var variable-name = ;

- we use "document.write(var);" to print the value of a variable.

- we can also use "console.log(var);" to print the value of a
variable to browser console.

- also "alert(var);" will create a popup with the variable's
value that appears on top of browser.

- last using REPL and call the variable name.

- type of variables are dynamic. variable types are:
    - Number
        all the numbers are stored using floating-point notation.
        i.e. 5 is stored as 0.5e1.
        - +infinity represent all number grater than
        Number.MAX_VALUE(around 10^308).
        - -infinity represents all numbers less than
        Number.MIN_VALUE(around 10^-324).
        - NaN which means not a number, like Number(tree) returns NaN.
        - ++ and -- can be used to increment/decrement.

    - String
        - represented by a series of 16-bit unsigned integers, each
        representing a character.
        - convention is to use single quotes normally.
        - escape characters use backslash: \n, \t, \\
        - all JS strings are immutable, which means any manipulation
        results in a new one.
        - + or .concat(string) can be used to concatenate.
        - .toUpperCase() and .toLowerCase() makes a new string.
        - var.length

    - Boolean

        - true or flase
        - any value can be used as boolean in JS:
            - falsy values: null, undefined, 0, NaN, ''
            - truthy values: every other value.
        - any variable can become boolean when used with logical ops.
        - Null can be assigned to mean no value.
        - Undefined means it has no value.

    - Null
    - Undefined

- Arrays are used to store a list of values in a single variable.
    var myArray = ['hello', 5, false];

    - using arrayVar[index] we can access its elements.
    - length of an array can be found using .length
    - we will get an undefined if the index is out of bounds.
    - if you set a value to an out of bounds index, it will add
    that value to that index of the array.
    - if the index is negative it creates a mapping to that value.
    - push() will add elements to the end of the array.
    - unshift() will add elements to the beginning of the array.
    - pop() will remove and return an element from the end of the array.
    - shift() will remove and return an element from the beginning.

- Objects are used to store key-value pairs.
    var myObject = {}

    - values can be of any type, including arrays and objects.
    - values can be accessed by myObject.property or
    myObject['property']
    - Key-values can be added even after initial declaration.

JavaScript controls

- conditional statements
    - if (condition) {command;} else {command;}
    - === means equal to and same type
    - !== means not equal to or different type
    - || logical OR
    - && logical AND
    - ! logical NOT
    - when comparing a string to a number, JS will try to convert
    the string to numeric form.
    - non-numeric strings are compared alphabetically.
    - objects are only considered equal if the variables are aliases
    which means they refer to the same object.


- loop statements

  - for (var i = 1; loop condition; i++){command;}
  - while (loop condition) {command;}
  - do {command;} while (loop condition);


Functions

- function function-name (parameters) {body}
    - we can use return value;
    - .forEach(function-name); function will apply the function
    to each element of an array.
    - .every(function-name); function will call the function on
    every element of an array.
    - .map(function-name); will apply the function to every element
    of an array but it would return a new array with the new values.
    - Primitive arguments are passed by value meaning the function
    can not change them.
    - object arguments are passed by reference meaning the function
    can change them.
    - JS functions are objects, therefore they can have properties,
    also variables can refer to them.
    - functions can also be declared and used in objects.
    - every object is JS has a prototype, accessed from the __proto__
    property in the object. __proto__ is also an object and so on.
    - the root prototype of all objects is Object.prototype.
    - an object inherits the properties of its prototype.
    - "this" keyword refers to the current object.
    - "new" keyword can be used to create new objects from the same
    prototype.
    - prototypes can extend another prototype with more functionality.
    - to inherit a prototype, set the __proto__ property of an object
    to the parent prototype.
        this.__proto__ = new object;
    - properties and methods can be added to prototypes by adding them
    to the prototype property.
        object.prototype.newProperty;


JS Regular expressions

- strings are objects too.
- we can access each character by its (0-based) index using charAt or
array notion.
- modifying functions return a new string.
- .trim() function can be used to remove white spaces from the beginning
and the end.
- .startsWith(string); returns a true or false value, case sensitive.
- .endsWith(string);
- .includes(string);
- .search(string); returns the starting index of a contained substring.
it will return -1 if does not contain.


- a regular expression is a pattern of characters
- a string matches a regular expression if it adheres to the
same pattern.
- we can pass a regular expression to the .search(); function
- in general it is considered a match if any part of the string
matches the regular expression.
- (/regular expression/i) will ignore case.
- /regex/.test(string); can be used to find a pattern in a string.
returns true or false.
- /[abc]/ will look for any of those regex characters in the string.
- /[a-z]/ will specify a range of characters to look for.
- /\d/ looks up for digits.
- /[0-9][a-z][0-9]/ looks for a 3r4 pattern.
- /[^0-9a-z]/ looking for a pattern not including 0-9 and a-z.
- ? means single or no occurrence.
- * means 0 or more
- /^[a-z][0-9]/ means starts with an alphabet.
- /[a-z][0-9]$/ means ends with a digit.
- /^[][]$/ means looking for an exact match.

- Document Object Model is a structured tree representation of a web page.
    * the HTML of every web page is turned into a DOM representation by the
    browser.
    * DOM provides a way for us to programmatically access that structure in
    JavaScript.
    * the root DOM object can be accessed by the object called "document".
    * elements in the DOM tree can be retrieved and manipulated.
    * document.getElementById('element-id') will retrieve the desired element
    using the id assigned to it.
    * we can set html value of the element using .innerHTML
    * data can be stored in the browser across multiple page requests using
    "localStorage".
    * parseInt() is used to change the value into integer after reading from
    a storage.
    * .setItem('property', value) will set a value to a variable or storage.
    * elementId.style.property can be used to change an item's style using JS.

- JavaScript Object Notation (JSON)
    * is a textual representation of a JavaScript object that can be stored as
    a string in a .json file, or be exchanged between programs.
    * JavaScript objects can be turned into a JSON string via
        JSON.stringify(object-name)
    * string representation can be converted back to an object via
        JSON.parse(json-string)
    * all values must be a string, number, array, boolean, null, or another
    valid json object.
    * a great application of JSON usage is to store JSON strings in local
    browser storage.
        localStorage.JSON-file = JSON.stringify(object-name);
        ..
        ..
        object-name = JSON.parse(localStorage.JSON-file);
    * you can also use JSON data to communicate with a server or API.

- localStorage
    * LocalStorage is a type of web storage that allows Javascript websites and
    apps to store and access data right in the browser with no expiration date.
    This means the data stored in the browser will persist even after the browser
    window has been closed.

    * limitations:
        - Do not store sensitive user information in localStorage
        - It is not a substitute for a server based database as information is
        only stored on the browser
        - LocalStorage is limited to 5MB across all major browsers
        - LocalStorage is quite insecure as it has no form of data protection
        and can be accessed by any code on your web page.
        - LocalStorage is synchronous. Meaning each operation called would only
        execute one after the other.

    *LocalStorage as a type of web storage is an HTML5 specification. It is
    supported by major browsers including IE8. To be sure the browser supports
    LocalStorage, you can check using the following snippet:
        if (typeof(Storage) !== "undefined") {
        // Code for localStorage
        } else {
        // No web storage Support.
        }

    * methods of using localStorage:
        - setItem(): Add key and value to LocalStorage
        - getItem(): Retrieve a value by the key from LocalStorage
        - removeItem(): Remove an item by key from LocalStorage
        - clear(): Clear all LocalStorage
        - key(): Passed a number to retrieve nth key of a LocalStorage

- we use object.addEventListener('event-strain', function) to define and event
driven routine.

- Event-Driven programming is when a program's behavior is based on events.
- in web programming these events are usually user actions.
- different events/actions invoke different "callback-functions" which handle
that event/action.
- event-driven programming is a form of asynchronous programming.
- in synchronous programming:
    * we're expecting a user input.
    * we're continuously re-checking a text field until the user has put in
    the required information.
    * we run some code on user's input.

- in asynchronous programming:
    * we're expecting a user input.
    * we tell the browser to let the program know whenever th user has put in the
    required information.
    * we possibly run other code until the browser notifies us.
    * when the user has put in the information we will run the associated
    callback function.

- we can use .getElementByClassName('class-name') to retrieve elements and work
with them.
- "click", "mouseover", "mouseout", "keyup" are event-strains.
- for example in this code, we register a keypress as an event and act upon it:
    function nameHandler(e) { // e stands for event
      if (e.keyCode == 13) { // 13 is the Enter key
          ..
      }
    }

- .textTransform = 'text-mode' .e.g 'capitalize' is used to change the style of
the text.

- to use jQuery we download the file and insert it into the html head element:
    <script src="jQueryfile.js"></script>
  or we can use a Content Delivery Network (CDN):
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
      <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js"></script>

- jQuery
    * $ is used to select DOM elements for manipulation, along with basic CSS
    element syntax.
    * $("*") --> selects all the elements.
    * $(this) --> selects the current element.
    * $("div") --> selects all <div> elements.
    * $(".title") --> selects all elements with class="title"
    * $("#name") --> selects the element with id="name"
    * the general format is:
        $(selector).action(arguments)
    * actions include "html", "append", "addClass", "hide()", "show()"
    * to add an event listener to an element, the general format is:
        $(selector).event(callback)
    * .val() as an action can be used to get the value of the html element.
    * .css() as an action helps with styling elements on the go.
    * .mouseenter()  is the event for mouse is hovering over an element.
    * .mouseleave() is when the mouse goes away.
    * .hover() is the combination of "mouseenter" and "mouseleave" which allows
    you to define two functions, first is for mouseenetr and second is for
    mouseleave.
    * the .on() event allows us to bind multiple callback functions to a single
    selected item by specifying an object that lists all those different functions
    for different events.
    * .find() action is used to select elements within the selected elements.
    * $(someNodes).find(selector) will search 'someNodes' children for selector.
    * $ selectors can be chained:
        - $("div.class") --> selects all the div elements with class property.
        - $("div, .class") --> selects all the div elements and elements that
        have .class property.
    * : can be used to specify element properties
        - $("p:hidden") selects all <p> elements that are visually hidden.
    * all CSS selectors work in jQuery.
    * list of events for mouse:
        - click
        - dblclick
        - mousedown
        - mouseup
        - hover
    * list of keyboard events:
        - keydown
        - keyup
        - keypress
    * list of form events:
        - focus
        - blur
        - change
        - reset
        - submit
    * Window/Element events:
        - load
        - resize
        - scroll
        - unload
    * we can use attributes for selection using this notation:
        $("selector[attribute-name=attribute-value]")
    * we can use types for selection using this notation:
        $("selector:type[attribute-name=attribute-value]")
    * we can inspect properties of elements such as a radio button being checked
    like this:
        $("input:radio").prop('checked') which returns a true or false.
    * list.indexOf(value) gives us the index of the element that matches the
    value.
    * list.splice(index, number of elements to remove) removes elements from the
    list.
    * .addClass('class-name') and .removeClass('class-name') are used to add or
    remove a class from a html element.
